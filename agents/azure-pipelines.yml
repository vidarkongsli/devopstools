
variables:
  registryName: 'spdyng.azurecr.io'
  namePrefix: spdy-ng
  dockerRegistryServiceConnection: $(namePrefix)-acr
  repository: 'demos/$(namePrefix)'
  imageNameNoTag: $(registryName)/$(repository)
  imageName: $(imageNameNoTag):$(build.buildNumber)
  imageNameLatest: $(imageNameNoTag):latest
  checkImageUri: https://$(registryName)/v2/demos/$(namePrefix)/tags/list

trigger:
  branches:
    include:
      - master

jobs:
  - job: prepareDockerImage
    displayName: Detect Docker image
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - pwsh: |
        $hash = (Get-Content 'agents/Dockerfile_agent','agents/testapp/package-lock.json' | Out-String | sha1sum -).Substring(0, 40) 
        echo "##vso[task.setvariable variable=imageName;isOutput=true]$(repository):$hash"
        echo "##vso[task.setvariable variable=hash;isOutput=false]$hash"
        $serviceConnection = Get-Content '$(DOCKER_CONFIG)/config.json' | ConvertFrom-Json
        $requestHeaders = @{'Authorization'='Basic ' + $serviceConnection.auths.'$(registryName)'.auth}
        $tags = Invoke-RestMethod -uri '$(checkImageUri)' -Headers $requestHeaders -SkipHttpErrorCheck -StatusCodeVariable statusCode
        if ($tags.errors) {
          Write-Error "ACR response: $($statusCode) for $(checkImageUri), errors $($tags.errors[0].code) $($tags.errors[0].message)"
          Exit 1
        }
        $imageExists = $tags.tags -Contains $hash
        echo "##vso[task.setvariable variable=imageExists;isOutput=true]$imageExists"
      name: imageDetect
      displayName: Calculate image hash and check if image exists in ACR

    - script: docker build -f Dockerfile_agent -t $(imageName) -t $(imageNameNoTag):$(hash) .
      displayName: Build docker image
      condition: and(succeeded(),eq(variables['imageDetect.imageExists'],'False'))
      workingDirectory: agents
        
    - task: Docker@2
      displayName: Push image to container registry
      condition: and(succeeded(),eq(variables['imageDetect.imageExists'],'False'))
      inputs:
        command: push
        repository: $(repository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: '$(hash)'

  - job: buildApp
    displayName: Build application job
    pool:
      vmImge: 'ubuntu-latest'
    dependsOn: prepareDockerImage
    condition: succeeded()
    variables:
      image: $[ dependencies.prepareDockerImage.outputs['imageDetect.imageName'] ]
    container:
      image: $[ variables.image ]
      endpoint: spdy-ng-acr
    steps:
      - script: |
          ln -s /src/node_modules node_modules
          npm run test_ci
          npm run build_ci
        workingDirectory: agents/testapp
        displayName: Run unit tests and build app for production
      # - task: CopyFiles@2
      #   inputs:
      #     contents: 'agents/testapp/dist/testapp/**'
      #     targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: agents/testapp/dist/testapp
          artifactName: app
