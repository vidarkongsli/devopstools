
variables:
  registryName: 'spdyng.azurecr.io'
  namePrefix: spdy-ng
  dockerRegistryServiceConnection: $(namePrefix)-acr
  repository: 'demos/$(namePrefix)'
  imageNameNoTag: $(registryName)/$(repository)
  imageName: $(imageNameNoTag):$(build.buildNumber)
  imageNameLatest: $(imageNameNoTag):latest
  checkImageUri: https://$(registryName)/v2/demos/$(namePrefix)/tags/list

trigger:
  branches:
    include:
      - master

jobs:
  - job: detectDockerImage
    displayName: Detect Docker image
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - pwsh: |
        $hash = (Get-Content agents/Dockerfile_agent) + (Get-Content agents/testapp/package-lock.json) | sha1sum
        echo "##vso[task.setvariable variable=hash;isOutput=true]$hash"
        Write-host "Hash is $hash"
        $connection = Get-Content '$(DOCKER_CONFIG)/config.json' | ConvertFrom-Json
        $tags = Invoke-WebRequest -uri '$(checkImageUri)' -Headers @{'Authorization'="Basic $($connection.auths.'$(registryName)'.auth)"} `
          | Select-Object -ExpandProperty Content `
          | ConvertFrom-Json `
          | Select-Object -ExpandProperty tags
        $imageExists = $tags -Contains $hash
        Write-host "Image exists: $imageExists"
        echo "##vso[task.setvariable variable=exists;isOutput=true]$imageExists"
      name: imageDetect

  - job: buildImage
    displayName: Build Docker Image
    pool:
      vmImage: 'ubuntu-16.04'
    dependsOn: detectDockerImage
    condition: and(succeeded(),eq(dependencies.detectDockerImage.outputs['imageDetect.exists'],'False'))
    variables:
      imageHash: $[ dependencies.detectDockerImage.outputs['imageDetect.hash'] ]
    steps:
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: $(dockerRegistryServiceConnection)
      
      - script: docker build -f Dockerfile_agent -t $(imageName) -t $(imageNameLatest) .
        displayName: 'docker build'
        workingDirectory: agents
        
      - task: Docker@2
        displayName: Push an image to container registry
        inputs:
          command: push
          repository: $(repository)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(build.buildNumber)
            latest
            $(imageHash)
  - job: buildApp
    displayName: Build application
    pool:
      vmImge: 'ubuntu-16.04'
    dependsOn: buildImage
    condition: always()
    variables:
      image: $[ join(variables.repository,':',dependencies.detectDockerImage.outputs['imageDetect.hash']) ]
    container:
      image: $[ variables.image ]
      endpoint: spdy-ng-acr
    steps:
      - script: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          ln -s /src/node_modules node_modules
          npm run test_ci
          npm run build_ci
        workingDirectory: agents/testapp
