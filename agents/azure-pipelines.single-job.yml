
variables:
  registryName: 'spdyng.azurecr.io'
  namePrefix: spdy-ng
  dockerRegistryServiceConnection: $(namePrefix)-acr
  repository: 'demos/$(namePrefix)'
  imageNameNoTag: $(registryName)/$(repository)
  imageName: $(imageNameNoTag):$(build.buildNumber)
  imageNameLatest: $(imageNameNoTag):latest
  checkImageUri: https://$(registryName)/v2/demos/$(namePrefix)/tags/list
  yearMonth: $[ format('{0:yyyyMM}', pipeline.startTime) ]

trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: $(dockerRegistryServiceConnection)

- pwsh: |
    $hash = ((Get-Content './Dockerfile_agent','./testapp/package-lock.json' -Raw) -join '' | sha1sum -).Substring(0, 40) 
    echo "##vso[task.setvariable variable=hash;isOutput=false]$hash"
    echo "Hash is $hash"
    $serviceConnection = Get-Content '$(DOCKER_CONFIG)/config.json' | ConvertFrom-Json
    $requestHeaders = @{'Authorization'='Basic ' + $serviceConnection.auths.'$(registryName)'.auth}
    $tags = Invoke-RestMethod -uri '$(checkImageUri)' -Headers $requestHeaders -SkipHttpErrorCheck -StatusCodeVariable statusCode
    if ($tags.errors) {
      if ($statusCode -eq 404) {
        echo "##vso[task.setvariable variable=imageExists;isOutput=false]False"
        Exit 0
      }
      Write-Error "ACR response: $($statusCode) for $(checkImageUri), errors $($tags.errors[0].code) $($tags.errors[0].message)"
      Exit 1
    }
    $imageExists = $tags.tags -Contains $hash
    echo "##vso[task.setvariable variable=imageExists;isOutput=false]$imageExists"
    echo "Image exists: $imageExists"
  name: imageDetect
  displayName: Calculate image hash and check if image exists in ACR
  workingDirectory: agents

- script: docker build -f Dockerfile_agent -t $(imageName) -t $(imageNameNoTag):$(hash) -t $(imageNameNoTag):$(yearMonth) .
  displayName: Build docker image
  condition: and(succeeded(),eq(variables.imageExists,'False'))
  workingDirectory: agents
    
- task: Docker@2
  displayName: Push image to container registry
  condition: and(succeeded(),eq(variables.imageExists,'False'))
  inputs:
    command: push
    repository: $(repository)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(hash)
      $(yearMonth)

- pwsh: |
    $dockerFile = Get-Content ./Dockerfile
    $dockerFile -replace '$(repository):latest','$(imageNameNoTag):$(hash)' | Out-File ./Dockerfile
    echo (Get-Content ./Dockerfile)
  displayName: Set image to pull
  workingDirectory: agents

- script: DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --output $(Build.ArtifactStagingDirectory) .
  displayName: Build application
  workingDirectory: agents

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: app
